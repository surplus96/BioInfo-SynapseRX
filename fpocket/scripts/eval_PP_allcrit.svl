
global function my_distE [v1, v2]
	return sqrt add sqr (v1 - v2) ;
endfunction

global function eval_pdb [pdbname, ligname]

	local pdbcode = token first wordsplit [string pdbname, "."] ;

	// Get coords of the ligand
	local [cpdb, return_code] = task_call ['ReadPDB', [token pdbname],
						[errmsg:'ignore']] ;
	if return_code === 'error' then
		// Change the case, just in case... :p
		local updbcode = toupper pdbcode ;
		if updbcode === pdbcode then
			updbcode = tolower pdbcode ;
		endif
		pdbcode = updbcode ;


		pdbname = tok_cat cat [pdbcode, '.pdb'] ;
		[cpdb, return_code] = task_call ['ReadPDB', [token pdbname],
						[errmsg:'ignore']] ;
		if return_code === 'error' then
		// Well its not here obviously...
			print 'PDB not found' ;
			return [pdbcode, ligname, -2, -1.0, -1.0] ;
		endif
	endif

	//local cpdb =  ReadPDB pdbname ;
	local atoms = Atoms[] ;
	local latoms = atoms | (app token rName aResidue atoms) == ligname ;
	if isnull latoms then
		// Change the case, just in case... :p
		local uligname = toupper ligname ;
		if uligname === ligname then
			uligname = tolower ligname ;
		endif
		ligname = uligname ;
		

		latoms = atoms | (app token rName aResidue atoms) == ligname ;
		if isnull latoms then
			print 'Ligand not found...' ;
			return [pdbcode, ligname, -3, -1.0, -1.0] ;
		endif
		 
	endif
	local lcoord = aPos latoms ;

	oDestroy cpdb ;

	// Now load pocketpicker output
	local ppname = token cat [first wordsplit [string pdbname, "."],
			    	  "-PPicker.pdb"] ;


	[cpdb, return_code] = task_call ['ReadPDB', [token ppname, [center:1]],
						[errmsg:'ignore']] ;
	if return_code === 'error' then
		print 'PDB from PP not found' ;
		return [pdbcode, ligname, -4, -1.0, -1.0] ;
	endif
	//cpdb =  ReadPDB ppname ;

	// Store each pocket detected by PP using resname
	local resids =  uniq aResidue (Atoms[] |
			m_findmatch ['PC#', app token rName aResidue Atoms[]]) ;
	local resnames = cat rName resids ;

	local r, rok, dok, bary, dists, coords, nb_res, pockets ;
	local mindists, crit6, c4, c5, c6 ;
	local lastrname = '';
	for r in resids loop
		nb_res = length (resnames | resnames == cat rName r) ;

		if lastrname===rName r or nb_res === 1 then
		// If this residue has already been seen, or if this residue
		// is not splitted (typically the first pocket)
			if not isnull coords then
				coords = apt cat [coords, aPos cat rAtoms r] ;
			else
				coords = aPos cat rAtoms r ;
			endif

			bary = (app add coords) / length first coords ;
			dists = apt my_distE [nest bary, tr lcoord] ;
	
			// Store all min distance associated with pocket resname
			mindists = cat [mindists, min dists] ;
			pockets = cat [pockets, rName r] ;

			//print [cat rName r, min dists];
			if anytrue (dists <= 4.0) then
				rok = cat [rok, r] ;
				dok = cat [dok, min dists] ;
				print ["OK", pdbcode, cat rName rok, 
					min mget [dists,dists <= 4.0]];
			endif

			// Now calculates proportion of ligand atoms within 3A 
			// of pocket:
			local ppoints = tr coords ;
			local lpoints = tr lcoord ;
			local pdists = [] ;
			local l, nbp = 0, nbl = 0 ;
			for l in lpoints loop
				dists = apt my_distE[nest l, ppoints] ;

				if anytrue (dists <= 3.0) then
					nbp = nbp + 1 ;
				endif

				pdists = cat [pdists, nest dists] ;
			endloop

			// Proportion of pocket within  3A of ligand
			local alld = tr pdists ;
			local tmp = app anytrue apt leE [alld, 3.0] ;

			// Calculate criterias:
			c4 = (length (tmp | tmp == 1)) / length tmp ;
			c5 = nbp / length lpoints ;

			if c5 > 0.5 and c4 > 0.20 then
				c6 = 1 ;
			else
				c6 = 0 ;
			endif
			crit6 = cat [crit6, c6] ;

			coords = [] ;
			lastrname = rName r;
		else
		// If it's the first time we test a residue that appears 2 times
		// save coordinates for the next pocket to have the complete
		// pocket.
			coords = cat aPos cat rAtoms r ;
			lastrname = rName r;
			continue ;
		endif
	endloop

	local id3, c3, id6 ;

	// Return -1 if no pocket was found to be OK for the 3rd criteria
	if length rok <= 0 then 
		id3 = -1 ; c3 = -1 ;
	else
		// Do their way to evaluate
		//local minid = x_min mindists ;
		//local minpocket = first get [pockets, minid] ;

		//id = atoi totok second wordsplit [string minpocket, "C"] ;
	
		// Do ours
		local n = rName rok ;
		id3 = min atoi totok app second apt wordsplit [app string n, "C"] ;
		c3 =  min mindists ;
	endif

	// Do the same for the consensus criteria
	id6 = first (x_id crit6 | crit6 == 1) ;

	if isnull id6 then
		id6 = -1 ;
	endif

	oDestroy cpdb ;

	// return data
	return [pdbcode, ligname, id3,c3, id6] ;
endfunction

global function eval_pp tp_input

	local f = fopenr tp_input ;
	local L, res, data ;
	oDestroy Atoms[] ;
	while not isnull (L = first freadb [f, 'line', 1]) loop
		local v = app token fieldsplit [string L, "\t"] ;
		print v ;
		Close[force:1] ;
		res = cat [res, nest eval_pdb [v[2], v[3]]] ;
	endloop

	fclose f ;
	Close[force:1] ;

	print'\n*************' ;
	print tok_cat ['-> Results: ', totok length res, ' complexes:\n'] ;
	print res ;
	print app length res ;
	res = res | ((cat get [tr res, 3]) >= -1) ;
	print'\n*************' ;
	print tok_cat ['-> Stats: ', totok length res, ' valid complexes:\n'] ;

	local crit_PP = third tr res ;
	crit_PP = crit_PP | crit_PP > -2 ;
	print 'Pocket picker criteria:' ;
	print tok_cat [ 'Top 1/3: ', totok (length (crit_PP | crit_PP == 1)/ length crit_PP),
			'/',
			totok (length (crit_PP | (crit_PP >= 1 and crit_PP <=3))/length crit_PP)];

	local res6 = first get[tr res, 5]  ;
	print 'Pocket overlap consensus:' ;
	print tok_cat [ 'Top 1/3: ', totok (length (res6 | res6 == 1)/ length res6),
			'/',
			totok (length (res6 | (res6 >= 1 and res6 <=3))/length res6)] ;
	

	oDestroy Atoms[] ;

endfunction
