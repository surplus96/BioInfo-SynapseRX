"""In silico 실험 설계 모듈 (스켈레톤)."""

# TODO: AlphaFold 3 / CRISPick 연동

from auto_hypothesis_agent.models import ExperimentPlan, ExperimentDesign
from auto_hypothesis_agent.config import OMEGAFOLD_BIN, OMEGAFOLD_SUBBATCH_SIZE
from bio_knowledge_miner.data_collection.uniprot_client import fetch_fasta
from bio_knowledge_miner.data_collection.ensembl_client import fetch_cds
import re

import subprocess, tempfile, os, shutil, csv, functools
import glob
from typing import Tuple, Optional


class ExperimentDesigner:
    """Design experiments based on a hypothesis & parameters (stub)."""

    def design(self, plan: ExperimentPlan) -> ExperimentDesign:
        """Mock AlphaFold / CRISPick calls and return design object."""

        # Derive cell line from gene (very naive mapping)
        gene_param = plan.parameters.get("gene") if plan.parameters else None
        compound = plan.parameters.get("compound") if plan.parameters else None

        variant: str | None = None
        gene = gene_param
        if gene_param and "_" in gene_param:
            # e.g., 'KRAS_G12C'
            gene, var_part = gene_param.split("_", 1)
            variant = var_part

        # explicit variant parameter has priority
        if plan.parameters and plan.parameters.get("variant"):
            variant = plan.parameters["variant"]

        @functools.lru_cache(maxsize=1)
        def _load_mapping() -> dict[str, str]:
            mapping: dict[str, str] = {}
            csv_path = os.path.join(os.path.dirname(__file__), "resources", "gene2cellline.csv")
            if os.path.exists(csv_path):
                with open(csv_path, newline="") as f:
                    for row in csv.reader(f):
                        if len(row) >= 2:
                            mapping[row[0].strip().upper()] = row[1].strip()
            else:
                # fallback minimal mapping
                mapping = {
                    "KRAS": "HCT116",
                    "EGFR": "A431",
                    "BRAF": "HT29",
                }
            return mapping

        gene_to_cell = _load_mapping()
        cell_line = gene_to_cell.get(gene.upper() if gene else "", "HeLa")

        # Fetch sequences
        seq = None
        if gene:
            seq = fetch_fasta(gene)
            if seq and variant:
                seq = _apply_mutation(seq, variant)
        if not seq:
            seq = "M" * 100  # fallback

        # Fetch CDS DNA for guide design
        dna_seq = fetch_cds(gene) if gene else None
        guide_seq = "N" * 20
        if dna_seq:
            m = re.search(r"([ACGT]{20})(?=GG)", dna_seq)
            if m:
                guide_seq = m.group(1)
            else:
                guide_seq = dna_seq[:20]
        else:
            # fallback protein-derived dummy converted to NNN codons
            guide_seq = "A" * 20

        # Placeholder for predicted structure URL; set to None until populated
        protein_url: str | None = None

        # AlphaFold 3 API call (mock)
        if shutil.which(OMEGAFOLD_BIN):
            try:
                with tempfile.TemporaryDirectory() as tmp:
                    fasta_path = os.path.join(tmp, "input.fasta")
                    with open(fasta_path, "w") as f:
                        f.write(">prot\n" + seq + "\n")
                    out_dir = os.path.join(tmp, "out.pdb")
                    cmd = [OMEGAFOLD_BIN, fasta_path, out_dir]
                    # 16GB VRAM 메모리 사용량을 고려하여 subbatch_size 조정
                    if OMEGAFOLD_SUBBATCH_SIZE:
                        cmd.extend(["--subbatch_size", str(OMEGAFOLD_SUBBATCH_SIZE)])

                    subprocess.run(cmd, check=True)
                    # Find resulting PDB
                    pdb_candidates = glob.glob(os.path.join(out_dir, "*.pdb"))
                    if pdb_candidates:
                        os.makedirs("outputs", exist_ok=True)
                        src = pdb_candidates[0]
                        mut_tag = f"_{variant}" if variant else ""
                        filename = f"{gene or 'protein'}{mut_tag}_{plan.trial_index}.pdb"
                        dest = os.path.join("outputs", filename)
                        shutil.copy(src, dest)
                        protein_url = dest
            except Exception:
                protein_url = None

        if protein_url is None:
            # outputs 디렉터리에 항상 더미 PDB 생성하여 downstream 파이프라인이 파일을 찾을 수 있게 함
            os.makedirs("outputs", exist_ok=True)
            mut_tag = f"_{variant}" if variant else ""
            filename = f"{gene or 'protein'}{mut_tag}_{plan.trial_index}.pdb"
            dummy_path = os.path.join("outputs", filename)
            if not os.path.exists(dummy_path):
                with open(dummy_path, "w", encoding="utf-8") as f:
                    f.write("REMARK   Placeholder PDB generated by ExperimentDesigner.\n")
                    f.write("REMARK   Install OmegaFold or AlphaFold to generate real structure.\n")
            protein_url = dummy_path

        return ExperimentDesign(
            plan=plan,
            protein_structure_url=protein_url,
            crispr_guide_seq=guide_seq,
        )


# -----------------------------------------------------------------------------
# Helper for protein variant mutation
# -----------------------------------------------------------------------------


_AA3_TO_1 = {
    "ALA": "A",
    "ARG": "R",
    "ASN": "N",
    "ASP": "D",
    "CYS": "C",
    "GLN": "Q",
    "GLU": "E",
    "GLY": "G",
    "HIS": "H",
    "ILE": "I",
    "LEU": "L",
    "LYS": "K",
    "MET": "M",
    "PHE": "F",
    "PRO": "P",
    "SER": "S",
    "THR": "T",
    "TRP": "W",
    "TYR": "Y",
    "VAL": "V",
}


def _one_letter(aa: str) -> Optional[str]:
    aa = aa.upper()
    if len(aa) == 1:
        return aa
    return _AA3_TO_1.get(aa)


def _parse_mutation(mut_str: str) -> Tuple[Optional[str], int, Optional[str]]:
    """Parse mutation like 'G12C' or 'p.G12C' or 'Gly12Cys'. Return (from, position, to)."""
    mut_str = mut_str.strip()
    if mut_str.lower().startswith("p."):
        mut_str = mut_str[2:]

    # Regex for 1-letter format e.g. G12C
    m = re.match(r"([A-Za-z]{1,3})([0-9]+)([A-Za-z]{1,3})", mut_str)
    if not m:
        return None, -1, None

    src_raw, pos_str, tgt_raw = m.groups()
    src = _one_letter(src_raw)
    tgt = _one_letter(tgt_raw)
    try:
        pos = int(pos_str)
    except ValueError:
        pos = -1
    return src, pos, tgt


def _apply_mutation(seq: str, mutation: str) -> str:
    src, pos, tgt = _parse_mutation(mutation)
    if src is None or tgt is None or pos <= 0 or pos > len(seq):
        # Invalid parse; return original
        return seq
    idx = pos - 1
    if seq[idx] != src:
        # Mismatch; still mutate but warn
        print(f"[ExperimentDesigner] WARN: expected {src} at {pos}, found {seq[idx]} – mutating anyway")
    return seq[:idx] + tgt + seq[idx + 1 :] 